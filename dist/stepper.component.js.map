{"version":3,"file":"stepper.component.js","sourceRoot":"","sources":["../src/stepper.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { customElement, property, query, queryAll } from 'lit-element';\r\nimport { Base } from '@spectrum/sp-base';\r\nimport stepperStyles from './stepper.styles';\r\nimport template from './stepper.template';\r\n\r\nimport { Button } from '@spectrum/sp-button';\r\nimport { Textfield } from '@spectrum/sp-textfield';\r\n\r\n@customElement('sp-stepper')\r\nexport class Stepper extends Base {\r\n  public static componentStyles = [ Button.componentStyles, Textfield.componentStyles, stepperStyles ];\r\n\r\n  @query('#stepinput') stepInput: HTMLInputElement;\r\n\r\n  @property({ type: Boolean }) quiet = false;\r\n  @property({ type: Boolean }) disabled = false;\r\n  @property({ type: Boolean }) focused = false;\r\n  @property({ type: Boolean }) invalid = false;\r\n  @property({ type: String }) placeholder = \"Enter a number\";\r\n  @property({ type: String }) value = \"\";\r\n  @property({ type: String }) min = \"-2\";\r\n  @property({ type: String }) max = \"2\";\r\n  @property({ type: String }) step = \"0.5\";\r\n\r\n  _handleValueChange(e) {\r\n    let changedEvent = new CustomEvent('changed', {\r\n      detail: {\r\n        priority: this.stepInput.value\r\n      },\r\n      bubbles: true,\r\n      composed: true\r\n    });\r\n    this.dispatchEvent(changedEvent);\r\n  }\r\n\r\n  _handleUpClick(e) {\r\n    var newValue = +this.stepInput.value;\r\n    newValue = newValue + Number(this.step);\r\n    this.stepInput.value = String(newValue);\r\n    this._handleValueChange(e);\r\n  }\r\n\r\n  _handleDownClick(e) {\r\n    var newValue = +this.stepInput.value;\r\n    newValue = newValue - Number(this.step);\r\n    this.stepInput.value = String(newValue);\r\n    this._handleValueChange(e);\r\n  }\r\n\r\n\r\n  _handleEnterKeyPress(e) {\r\n    if (e.code == \"Enter\" || e.code == \"NumpadEnter\") {\r\n      let changedEvent = new CustomEvent('enterkeypress', {\r\n        detail: {\r\n          priority: this.stepInput.value\r\n        },\r\n        bubbles: true,\r\n        composed: true\r\n      });\r\n      this.dispatchEvent(changedEvent);\r\n    }\r\n  }\r\n\r\n  protected render() {\r\n    return template.call(this);\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-stepper': Stepper;\r\n  }\r\n}\r\n"]}